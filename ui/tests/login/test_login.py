"""Login UI tests"""
import logging
import pytest
import time
from common.utils.logger import configure_log
from common.config.config import Config
from ui.facade.login import Login_facade
from api.facade.user_operations import UserActions
from common.utils.exceptions import HTTPError
from common.utils.common import generate_test_params


LOG = configure_log(logging.INFO, __name__, "test_login.log")
test_params = generate_test_params(__file__)
LOG.info("Test params {}".format(test_params))

class TestLogin(object):

	@pytest.mark.parametrize(["testcase","req", "response", "metadata"], test_params)
	def test_login(self, rest, driver, testcase, req, response, metadata):
		"""
		Tests login for users generated by test params
		Args:
			rest: REST object for all rest operations
			driver: selenium webdriver object
			testcase: testcaase name
			req: request for REST login calls
			response: response for REST login calls
			metadata: metadata for the test
		"""
		if response["code"] == "200":
			LOG.info("For valid login, we are making sure that the user is already registered")
			user_actions = UserActions(rest)
			try:
				user_actions.register(username=metadata["username"], password=metadata["password"])
			except HTTPError as e:
				LOG.info(e)
		else:
			#Generating random username for login to fail
			metadata["username"] += str(time.time())
		LOG.info("Logging in with the username {}".format(metadata["username"]))
		driver.get("http://localhost:3000")
		login = Login_facade(driver)
		if response["code"] == "200":
			assert login.login(metadata["username"], metadata["password"]) == True
		else:
			assert login.login(metadata["username"], metadata["password"]) == False
		
		