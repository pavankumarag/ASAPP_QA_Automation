"""Add to cart UI tests"""
import logging
import pytest
import time
from common.utils.logger import configure_log
from common.config.config import Config
from ui.facade.login import Login_facade
from ui.facade.store import Store_facade
from ui.facade.cart import Cart_facade
from api.facade.user_operations import UserActions
from common.utils.exceptions import HTTPError
from common.utils.common import generate_test_params


LOG = configure_log(logging.INFO, __name__, "test_add_to_cart_ui.log")
test_params = generate_test_params(__file__)
LOG.info("Test params {}".format(test_params))

class TestLogin(object):

	@pytest.mark.parametrize(["testcase","req", "response", "metadata"], test_params)
	def test_add_to_cart(self, rest, driver, testcase, req, response, metadata):
		"""
		Tests add to cart for products generated by test params
		Args:
			rest: REST object for all rest operations
			driver: selenium webdriver object
			testcase: testcaase name
			req: request for REST login calls
			response: response for REST login calls
			metadata: metadata for the test
		"""
		# First login
		login = Login_facade(driver)
		login.login()
		store = Store_facade(rest, driver)

		#navigate to cart
		store.navigate_to_cart()
		cart = Cart_facade(driver)

		#get the current value in the cart
		current_value_in_cart = cart.get_current_quantity_in_cart(product_name=metadata["product_name"])
		LOG.info("current value in cart {}".format(current_value_in_cart))

		#navigate to store and add to cart
		store.navigate_to_store()
		LOG.info("Adding {product_name} of quantity {quantity} to the cart".format(product_name=metadata["product_name"],
									     quantity=metadata["quantity"]))
		store.add_to_cart(product_name=metadata["product_name"], quantity=metadata["quantity"])
		store.navigate_to_cart()
		new_value_in_cart = cart.get_current_quantity_in_cart(product_name=metadata["product_name"])
		assert int(new_value_in_cart) == int(current_value_in_cart) + int(metadata["quantity"])